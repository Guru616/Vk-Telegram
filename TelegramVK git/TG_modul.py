import asyncio
import json
import logging
import os
import aiogram
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.utils.markdown import link
from aiogram.filters.command import Command
from aiogram.types import URLInputFile, LinkPreviewOptions, InputMediaPhoto
from config import TG_API_TOKEN, CHANNEL_ID, ID_CHAT_BOT
from config import  NAMES_GROUP_LIST
import re

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=TG_API_TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()
# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫
url_pattern = re.compile(r'^(http|https)://')

# –§–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
sending_active = False
def get_photo_file(post):# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ "–∞–ª—å–±–æ–º–∞"
    images = []
    for attachment in post['attachments']:
        if attachment['type'] == 'photo':
            photo_sizes = attachment['photo']['sizes']
            max_size_photo = max(photo_sizes, key=lambda x:x['height']*x['width'])
            images.append(max_size_photo['url'])
    return images

async def sending_posts():
    global sending_active
    media = []

    # –ú–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    sent_posts = set()  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ—Å—Ç–æ–≤
    sent_texts = set()  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ—Å—Ç–æ–≤

    for name_group in NAMES_GROUP_LIST:
        with open(f"Data_group_vk/{name_group}/posts_text.json", "r", encoding="utf-8") as file:
            data_posts = json.load(file)

            for post in data_posts:
                if not sending_active:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
                    return

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∏ –Ω–∞ —Ä–µ–ø–æ—Å—Ç—ã (—Ä–µ–∫–ª–∞–º—É)
                if 'marked_as_ads' in post and post['marked_as_ads'] == 1:
                    print('ads')
                    print(post['text'])
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã
                elif 'copy_history' in post:
                    print('repost')
                    print(post['text'])
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–ø–æ—Å—Ç—ã
                elif 'is_pinned' in post and post['is_pinned'] == 1:
                    print('pin post')
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã

                # –ù–µ —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç
                post_text = post['text']
                post_id = post['id']

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                if post_id in sent_posts or (post_text, post_id) in sent_texts:
                    print(f"–ü–æ—Å—Ç —Å ID {post_id} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞ –∏ —Ç–µ–∫—Å—Ç –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
                sent_posts.add(post_id)
                sent_texts.add((post_text, post_id))



                if url_pattern.match(post_text):  # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
                    await bot.send_message(chat_id=CHANNEL_ID, text=post_text + '\n' + 'üëâ ' + f'<a href="{owner_post}">–ü–†–û–î–ê–í–ï–¶</a>',parse_mode='HTML')  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
                    continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Å—Ç—É

                post_text = post['text']
                if 'signer_id' in post:
                    owner_post = 'https://vk.com/id' + str(post['signer_id'])
                else:
                    print(post['id'])
                    owner_post = '–ê–Ω–æ–Ω–∏–º–Ω–æ'

                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω—ã–º –ø–æ—Å—Ç–æ–º
                owner_post = f'https://vk.com/id{post["signer_id"]}' if 'signer_id' in post else ''

                # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –ø–æ—Å—Ç–∞
                for photo in get_photo_file(post):
                    media.append(URLInputFile(photo))  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–ø–∏—Å–æ–∫

                if media:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
                    caption = post_text + '\n' + 'üëâ ' + f'<a href="{owner_post}">–ü–†–û–î–ê–í–ï–¶</a>'

                    while True:
                        try:
                            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                            media_group = []
                            for index, image in enumerate(media):
                                if index == 0:  # –ø–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é
                                    media_group.append(InputMediaPhoto(media=image, caption=caption, parse_mode='HTML'))
                                else:  # –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
                                    media_group.append(InputMediaPhoto(media=image))

                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
                            await bot.send_media_group(chat_id=CHANNEL_ID, media=media_group)
                            media.clear()  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                            break  # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                        except aiogram.exceptions.TelegramRetryAfter as e:
                            print(f"–û—à–∏–±–∫–∞: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫—É–Ω–¥.")
                            await asyncio.sleep(e.retry_after)  # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        except Exception as e:
                            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    # –í –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏, –æ—á–∏—Å—Ç–∏–º media, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
    media.clear()  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await bot.send_message(chat_id=ID_CHAT_BOT,text='–í—Å–µ –ø–æ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    global sending_active
    sending_active = True
    await message.answer('–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å')
    await sending_posts()

@dp.message(Command("stop"))
async def cmd_start(message: types.Message):
    global sending_active
    sending_active = False
    await message.answer('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')

async def maintg():
    await dp.start_polling(bot)